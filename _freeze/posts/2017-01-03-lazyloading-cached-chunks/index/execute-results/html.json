{
  "hash": "29ac8d6b111f36e1638d73e24a9fd4e0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle:  \"(lazy)Loading Cached Chunks into an Interactive R Session\"\nauthor: \"Peter DeWitt\"\ndate:   2017-01-03\ndate-modified: 2024-10-01\ncategories: [R, knitr, cache, qwraps2]\n---\n\n\n\nIf you cache code chunks when using\n[knitr](https://CRAN.R-project.org/package=knitr) to generate reproducible\ndocuments then you've likely had the issue arrise of needing to load the results\nof cached chunks into an active interactive R session.  The functions\n`lazyload_cache_dir` and `lazyload_cache_labels` have been added to the\ndevelopmental version of [qwraps2](https://github.com/dewittpe/qwraps2) to make\nloading cached objects into an interactive R session easy.\n\nLet's make some trivial cached chunks in a file report.Rmd.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n````\n      ---\n      title:  \"A Report\"\n      output: html_document\n      ---\n      \n      ```{r, label = \"first-chunk\", cache = TRUE}\n      fit <- lm(mpg ~ wt + hp, data = mtcars)\n      x <- pi\n      ```\n      \n      ```{r, label = \"second-chunk\", cache = TRUE}\n      fit <- lm(mpg ~ wt + hp + am, data = mtcars)\n      xx <- exp(1)\n      ```\n````\n\n\n:::\n:::\n\n\n  \nThe resulting project directory looks like this:\n\n```\n    .\n    ├── report_cache\n    │   └── html\n    │       ├── first-chunk_bf368425c25f0c3d95cac85aff007ad1.RData\n    │       ├── first-chunk_bf368425c25f0c3d95cac85aff007ad1.rdb\n    │       ├── first-chunk_bf368425c25f0c3d95cac85aff007ad1.rdx\n    │       ├── __packages\n    │       ├── second-chunk_2c7d6b477306be1d4d4ed451f2f1b52a.RData\n    │       ├── second-chunk_2c7d6b477306be1d4d4ed451f2f1b52a.rdb\n    │       └── second-chunk_2c7d6b477306be1d4d4ed451f2f1b52a.rdx\n    ├── report.html\n    └── report.Rmd\n```\n\nNow, let's assume you need to come back to this project at a later date.  You\nwant to get the objects created in the cached chunks into a new interactive R\nsession.\n\nIf you use `lazyload_cache_dir` all the cached chunks will be load.\n\n\n```r\nrm(list = ls())\nls()\n## character(0)\nqwraps2::lazyload_cache_dir(path = \"report_cache/html\")\n## Lazyloading: report_cache/html/first-chunk\n## Lazyloading: report_cache/html/second-chunk\nls()\n## [1] \"fit\" \"x\"   \"xx\"\nfit\n## \n## Call:\n## lm(formula = mpg ~ wt + hp + am, data = mtcars)\n## \n## Coefficients:\n## (Intercept)           wt           hp           am  \n##    34.00288     -2.87858     -0.03748      2.08371\nx\n## [1] 3.141593\nxx\n## [1] 2.718282\n```\nThis could be a problem.  There was a `fit` created in `first-chunk` and another\nobject `fit` created in `second-chunk`.  The `fit` object in the active\nworkspace is from `second-chunk.`  What if you want the fit from `first-chunk`?\nUse `lazyload_cache_labels`.\n\n\n```r\nrm(list = ls())\nls()\n## character(0)\nqwraps2::lazyload_cache_labels(\"first-chunk\", path = \"report_cache/html\")\n## Lazyloading report_cache/html/first-chunk_bf368425c25f0c3d95cac85aff007ad1\nls()\n## [1] \"fit\" \"x\"\nfit\n## \n## Call:\n## lm(formula = mpg ~ wt + hp, data = mtcars)\n## \n## Coefficients:\n## (Intercept)           wt           hp  \n##    37.22727     -3.87783     -0.03177\nx\n## [1] 3.141593\nxx\n## Error in eval(expr, envir, enclos): object 'xx' not found\n```\n\nNow, what if you want `fit` from `first-chunk` and `xx` which was created in\n`second-chunk`?\n\n\n```r\nrm(list = ls())\nls()\n## character(0)\nqwraps2::lazyload_cache_dir(path = \"report_cache/html\")\n## Lazyloading: report_cache/html/first-chunk\n## Lazyloading: report_cache/html/second-chunk\nqwraps2::lazyload_cache_labels(\"first-chunk\", path = \"report_cache/html\")\n## Lazyloading report_cache/html/first-chunk_bf368425c25f0c3d95cac85aff007ad1\nls()\n## [1] \"fit\" \"x\"   \"xx\"\nfit\n## \n## Call:\n## lm(formula = mpg ~ wt + hp, data = mtcars)\n## \n## Coefficients:\n## (Intercept)           wt           hp  \n##    37.22727     -3.87783     -0.03177\nx\n## [1] 3.141593\nxx\n## [1] 2.718282\n```\n\nA better solution would be to use unique object names.  \n\nLastly, say you only want the `fit` from `first-chunk` and no other objects.\nThe optional `filter` argument of `lazyload_cache_labels` can be used.  The\n`filter` argument is passed to `lazyLoad`.  \"filter: An optional function which\nwhen called on a character vector of object names returns a logical vector:\nonly objects for which this is true will be loaded.\"\n\n\n```r\nrm(list = ls())\nls()\n## character(0)\nqwraps2::lazyload_cache_labels(\"first-chunk\",\n                               path = \"report_cache/html\",\n                               filter = function(x) x == \"fit\")\n## Lazyloading report_cache/html/first-chunk_bf368425c25f0c3d95cac85aff007ad1\nls()\n## [1] \"fit\"\nfit\n## \n## Call:\n## lm(formula = mpg ~ wt + hp, data = mtcars)\n## \n## Coefficients:\n## (Intercept)           wt           hp  \n##    37.22727     -3.87783     -0.03177\n```\n\nThe `lazyload_cache_dir` and `lazyload_cache_labels` functions are currently in\nthe developmental version of `qwarps2`.  You can get the code and install the\npackage from [https://github.com/dewittpe/qwraps2](https://github.com/dewittpe/qwraps2).\nI'm not sure when the next version of `qwraps2` will be pushed to CRAN, so the\ndevelopmental version will have to do for now.\n\nIf you find any bugs or have suggestions on how to improve the functions please\n[create and issue](https://github.com/dewittpe/qwraps2/issues).\n\nNote, the behavior of `knitr::load_cache` is very different from the behavior of\n`qwraps2::lazyload_cache_dir` and `qwraps2::lazyload_cache_labels`.\n`knitr::load_cache` is to be used to load cached values within a .Rmd prior to\nthe chunk being called.  See the documentation and \n[example 114-load-cache.Rmd](https://github.com/yihui/knitr-examples) from the \n[knitr-examples](https://github.com/yihui/knitr-examples) repository for the use of\n`knitr::load_cache`.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}