{
  "hash": "15a908e7f8fb6adea0a9d1a9d38aa9cc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle:  \"Secondary Axis in ggplot2 v2.2.0\"\ndate: 2016-11-15\ndate-modified: 2024-10-01\ntags: [R, programming, ggplot2, phd]\n---\n\n\n\nThe recent release of [Hadley Whickham's](http://hadley.nz/) \n[ggplot2](http://ggplot2.org/) [version\n2.2.0](https://blog.rstudio.org/2016/11/14/ggplot2-2-2-0/) included several new\nfeatures.  Notably\n\n* Subtitles and captions.\n* A large rewrite of the facetting system.\n* Improved theme options.\n* Better stacking.\n\nWhat jumped out to me was the not in the first four points noted above, but a\nnew option to display a secondary axis via `sec.axis`.  The note and example in\nthe RStudio blog post shows a secondary axis which is a one-to-one\ntransformation of the primary axis.\n\nThis blog post covers my exploration of this tool as I have an immediate want,\nthe `sec.axis` option to plot secondary axes.  In the figure below I have plotted\nseveral B-spline basis functions.  On the left side there x-axis has two labels,\nthe knot sequence denoted with subscripted &xi;s and general sequence notation.\nBelow each knot or subsequence of knots, are the numeric values for the knots.\nThe graphic on the right side shows the same basis but uses the `sec.axis`\noption to plot the numeric values of the knots on top of the graphic and the\nknot sequence as the primary axis on the bottom.\n\n![](plot_for_intro-1.png)\n\nThe following are more details on the construction of these plots.\n\n## Basic plot of a B-spline Basis\nMy Ph.D. work involves the use of B-splines.  I've had to plot the basis\nfunctions and the show the location of the knot sequence many times.  Here is a\nvery simple example.  We will plot the basis for a standard cubic B-spline with\nknot sequence &xi; = {0, 0, 0, 0, 1.2, 3.1, 4.6, 5.1, 6, 6, 6, 6}.\n\n\n\n::: {.cell resuls='hide'}\n\n```{.r .cell-code}\nlibrary(splines) \nlibrary(tibble)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nxvec   <- seq(0, 6, length = 100)  # data\niknots <- c(1.2, 3.1, 4.6, 5.1)    # internal knots\nbknots <- range(xvec)              # boundary knots\nk      <- 4                        # spline order (degree + 1)\nxi     <- c(rep(bknots[1], k), iknots, rep(bknots[2], k)) # full knot sequence\nbmat   <- bs(xvec, knots = iknots, intercept = TRUE)      # basis matrix\n```\n:::\n\n\n\nThe easiest plot of the spline functions is done via `matplot`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatplot(bmat, type = \"l\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nThis plot is okay.  My major concern is that x-axis is an index, not the `xvec`\nvalues.  Also, all my other graphics are generated via `ggplot2` and therefore\nthe basis plot should be too.  A simple `ggplot2` version of the basis plot is\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# NOTE: as.data.frame is easier than dplyr::as_data_frame for this task\nbmat_df <-\n  bmat %>%\n  as.data.frame %>%\n  add_column(x = xvec) %>%\n  gather(spline, value, -x)\n\nbase_plot <-\n  ggplot(bmat_df) +\n  aes(x = x, y = value, color = spline) +\n  geom_line()\n\nbase_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Show the location of the knots\nTo show the location of the knots on the x-axis is easy enough:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot + scale_x_continuous(breaks = unique(xi))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nWhat I really needed to do was show the location of the knots numerically and\nusing subscripted &xi;<sub>j</sub> for simple knots and general sequence\nnotation for repeated knots.\n\nThis is done by using the `atop` and `group` options\nwithin `plotmath` to generate the needed expression to be used in the x-axis\nticks.  The construction of the expressions is as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexpr <- list(bquote(atop(group('{', xi[j], '}')[j == 1]^{.(k)},\n                         .(formatC(bknots[1], 1, format = \"f\"))))) \n\nif (length(xi) > 2 * k) { \n  for(i in seq(k + 1, length(xi) - k, by = 1)) { \n    expr <- c(expr, bquote(atop(xi[.(i)], .(formatC(xi[i], 1, format = \"f\")))))\n  }\n} \n\nexpr <-\n  c(expr, \n    bquote(atop(group('{', xi[j], '}')[j == .(length(xi) - k + 1L)]^{.(length(xi))},\n                .(formatC(bknots[2], 1, format = \"f\")))))\n```\n:::\n\n\n\nThe updated plot is:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_plot + scale_x_continuous(breaks = unique(xi), labels = expr) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nI liked this plot.  However, the numeric values are not perfectly aligned.\nUsing `phantom` within the grouping has proven to be non-trivial.  So, I've been\nusing this style of plot for awhile now.\n\n## Secondary Axis in ggplot2 v2.2.0\nFirst, let's clean up the `expr` to only have the knot sequence characters.  No\nneed for the `atop` as we only need the &xi; characters and sequence notation no\nnumeric values.\n\n```r\nexpr <- list(bquote(group('{', xi[j], '}')[j == 1]^{.(k)}))\n\nif (length(xi) > 2 * k) { \n  for(i in seq(k + 1, length(xi) - k, by = 1)) { \n    expr <- c(expr, bquote(xi[.(i)]))\n  }\n} \n\nexpr <- c(expr, \n          bquote(group('{', xi[j], '}')[j == .(length(xi) - k + 1L)]^{.(length(xi))}))\n```\n\nAdd the primary and secondary axis to `base_plot` via the argument `sec.axis`\nand the function `sec_axis`.\n\n```r\nbase_plot +\nscale_x_continuous(breaks = unique(xi), labels = expr,\n                   sec.axis = sec_axis(~ ., breaks = unique(xi)))\n```\n\n![plot of chunk new_basis_plot](/figures/20161115-figures/new_basis_plot-1.png)\n\n\n\nThe first argument to `sec.axis` is a transform of the primary access values.\n`~ .` is a identity transform.  Other arguments `sec.axis` can take are `name`,\n`breaks` and `labels`, all of which behave as expected.\n\nFrom my point of view, reporting both the knot sequence and the numeric\nvalues is too much.  One or the other should be sufficient.  However, my opinion\nonly counts for so much.  In my forthcoming `cpr` package there is a plotting\nmethod for B-spline bases with options to `show_x` and `show_xi` to control how\nknots locations are shown in the plot.  If both options are `FALSE` then the\ndefault x-axis is plotted.  Prior to `ggplot2_2.2.0` being released, the options\nwould control the `expr` object to plot the x-axis on the bottom.  Now, with\n`ggplot2_2.2.0` I plan to move away from `atop` and use `sec.axis` instead to\ngive the end user the option to plot just the &xi;s, just the numeric values, or\nboth.\n\n\n#### Session Info\n\n```r\nprint(sessionInfo(), local = FALSE)\n## R version 3.3.2 (2016-10-31)\n## Platform: x86_64-pc-linux-gnu (64-bit)\n## Running under: Debian GNU/Linux 8 (jessie)\n## \n## attached base packages:\n## [1] splines   stats     graphics  grDevices utils     datasets  base     \n## \n## other attached packages:\n## [1] ggplot2_2.2.0 tidyr_0.6.0   dplyr_0.5.0   tibble_1.2    knitr_1.15   \n## \n## loaded via a namespace (and not attached):\n##  [1] Rcpp_0.12.7      digest_0.6.10    assertthat_0.1   plyr_1.8.4      \n##  [5] grid_3.3.2       R6_2.2.0         gtable_0.2.0     DBI_0.5-1       \n##  [9] magrittr_1.5     evaluate_0.10    scales_0.4.1     highr_0.6       \n## [13] stringi_1.1.2    lazyeval_0.2.0   labeling_0.3     tools_3.3.2     \n## [17] stringr_1.1.0    munsell_0.4.3    colorspace_1.3-0 gridExtra_2.2.1 \n## [21] methods_3.3.2\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}